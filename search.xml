<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript 语言]]></title>
    <url>%2F2018%2F05%2F24%2FJavaScript-%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[注：摘抄自dva.js 知识导图 变量声明const 和 let不要用 var，而是用 const 和 let，分别表示常量和变量。不同于 var 的函数作用域，const 和 let 都是块级作用域。 1234const DELAY = 1000;let count = 0;count = count + 1; 默认参数12345function logActivity(activity = 'skiing') &#123; console.log(activity);&#125;logActivity(); // skiing 模板字符串模板字符串提供了另一种做字符串组合的方法。 12345678const user = 'world';console.log(`hello $&#123;user&#125;`); // hello world// 多行const content = ` Hello $&#123;firstName&#125;, Thanks for ordering $&#123;qty&#125; tickets to $&#123;event&#125;.`; 箭头函数函数的快捷写法，不需要通过 function 关键字创建函数，并且还可以省略 return 关键字。 同时，箭头函数还会继承当前上下文的 this 关键字。 比如： 1[1, 2, 3].map(x =&gt; x + 1); // [2, 3, 4] 等同于： 123[1, 2, 3].map((function(x) &#123; return x + 1;&#125;).bind(this)); 模块的 Import 和 Exportimport 用于引入模块，export 用于导出模块。 比如： 123456789101112131415// 引入全部import React from 'react';// 引入部分import &#123; Component &#125; from 'react';import &#123; Row, Col &#125; from 'antd';// 引入全部并作为 github 对象import * as github from './services/github';// 导出默认export default App;// 部分导出，需 import &#123; App &#125; from './file'; 引入export class App extend Component &#123;&#125;; ES6 对象和数组析构赋值析构赋值让我们从 Object 或 Array 里取部分数据存为变量。 123456789// 对象const user = &#123; name: 'guanguan', age: 2 &#125;;const &#123; name, age &#125; = user;console.log(`$&#123;name&#125; : $&#123;age&#125;`); // guanguan : 2// 数组const arr = [1, 2];const [foo, bar] = arr;console.log(foo); // 1 我们也可以析构传入的函数参数。 123const add = (state, &#123; payload &#125;) =&gt; &#123; return state.concat(payload);&#125;; 析构时还可以配 alias，让代码更具有语义。 123const add = (state, &#123; payload: todo &#125;) =&gt; &#123; return state.concat(todo);&#125;; 对象字面量改进这是析构的反向操作，用于重新组织一个 Object 。 1234const name = 'duoduo';const age = 8;const user = &#123; name, age &#125;; // &#123; name: 'duoduo', age: 8 &#125; 定义对象方法时，还可以省去 function 关键字。 12345678app.model(&#123; reducers: &#123; add() &#123;&#125; // 等同于 add: function() &#123;&#125; &#125;, effects: &#123; *addRemote() &#123;&#125; // 等同于 addRemote: function*() &#123;&#125; &#125;,&#125;); Spread OperatorSpread Operator 即 3 个点 ...，有几种不同的使用方法。 可用于组装数组。 12const todos = ['Learn dva'];[...todos, 'Learn antd']; // ['Learn dva', 'Learn antd'] 也可用于获取数组的部分项。 1234567const arr = ['a', 'b', 'c'];const [first, ...rest] = arr;rest; // ['b', 'c']// With ignoreconst [first, , ...rest] = arr;rest; // ['c'] 还可收集函数参数为数组。 1234function directions(first, ...rest) &#123; console.log(rest);&#125;directions('a', 'b', 'c'); // ['b', 'c']; 代替 apply。 123456function foo(x, y, z) &#123;&#125;const args = [1,2,3];// 下面两句效果相同foo.apply(null, args);foo(...args); 对于 Object 而言，用于组合成新的 Object 。(ES2017 stage-2 proposal) 1234567891011const foo = &#123; a: 1, b: 2,&#125;;const bar = &#123; b: 3, c: 2,&#125;;const d = 4;const ret = &#123; ...foo, ...bar, d &#125;; // &#123; a:1, b:3, c:2, d:4 &#125; PromisesPromise 用于更优雅地处理异步请求。比如发起异步请求： 1234fetch('/api/todos') .then(res =&gt; res.json()) .then(data =&gt; (&#123; data &#125;)) .catch(err =&gt; (&#123; err &#125;)); 定义 Promise 。 123456789const delay = (timeout) =&gt; &#123; return new Promise(resolve =&gt; &#123; setTimeout(resolve, timeout); &#125;);&#125;;delay(1000).then(_ =&gt; &#123; console.log('executed');&#125;); -EOF-]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
